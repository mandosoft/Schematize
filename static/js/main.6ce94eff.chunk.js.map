{"version":3,"sources":["URL.js","PangenomeSchematic.js","ComponentConnectorRect.js","ComponentRect.js","ComponentNucleotides.js","LinkColumn.js","LinkArrow.js","LinkRecord.js","NucleotideTooltip.js","ControlHeader.js","App.js","serviceWorker.js","ViewportInputsStore.js","index.js"],"names":["urlExists","dataName","http","XMLHttpRequest","open","process","send","status","theUrl","callback","a","xmlHttp","onreadystatechange","readyState","responseText","range","start","end","Array","keys","map","v","PangenomeSchematic","props","pathNames","components","chunkIndex","jsonCache","chunksProcessed","nucleotides","loadIndexFile","store","jsonName","observe","beginEndBin","openRelevantChunksFromIndex","bind","chunkFastaURLs","loadFasta","this","indexContents","beginBin","getBeginBin","endBin","getEndBin","setAvailableZoomLevels","Object","selZoomLev","getSelectedZoomLevel","lastIndex","length","beginIndex","findIndex","entry","endIndex","URLprefix","fileArray","index","switchChunkURLs","fileArrayFasta","switchChunkFastaURLs","setChunkBeginEndBin","console","error","jsonFilename","indexPath","log","fetch","then","res","json","filepath","Error","url","data","json_version","MediaError","path_names","setBinWidth","parseInt","bin_width","path_fasta","response","text","sequence","replace","substr","push","split","getChunkFastaURLs","urls","getChunkURLs","urlIndex","jsonChunk","xOffset","slice","nextXOffset","entries","component","componentItem","Component","React","offsetLength","offset","firstBin","first_bin","lastBin","last_bin","arrivals","arrival","LinkColumn","departures","departure","x","occupants","from","matrix","num_bin","linkColumn","upstream","downstream","participants","key","edgeToKey","String","padStart","ConnectorRect","state","color","y","width","height","fill","MatrixCell","tooltipContent","pathName","ranges","item","j","updateCellTooltipContent","inverted","align","verticalAlign","onMouseEnter","onHover","onMouseLeave","onLeave","zip","arr","arrs","val","i","reduce","compress_visible_rows","rows_present","row","some","find_rows_visible_in_viewport","row_mapping","rows_encountered","sum","b","ComponentRect","handleClick","setState","count","parts","row_n","renderMatrixRow","updateMaxHeight","parent","x_val","pixelsPerColumn","this_y","useVerticalCompression","compressed_row_mapping","hasOwnProperty","cell","pixelsPerRow","topOffset","row_number","connectorsColumn","undefined","column","useConnector","renderComponentConnector","useWidthCompression","binScalingFactor","nucleotideHeight","onClick","renderMatrix","renderAllConnectors","ComponentNucleotides","handleMouseOut","handleMouseOver","updateHighlightedNode","alpha","contents","linkCells","y_coord","d","opacity","stroke","onMouseOver","onMouseOut","isInfinity","n","Number","isFinite","LinkArrow","link","event","getBeginEndBin","mid_bin","newBeginBin","Math","abs","newEndBin","updateBeginEndBin","updateSelectedLink","arrowXCoord","points","xArrival","departureX","xDepart","arrX","turnDirection","departOrigin","departCorner","elevation","departTop","arriveTop","arriveCorner","arriveCornerEnd","isArrival","isNaN","calculatePoints","bezier","strokeWidth","stroke-opacity","pointerLength","pointerWidth","tension","LinkRecord","xCoordArrival","xCoordDeparture","calculateLinkCoordinates","schematic","leftXStart","linkToXMapping","schematizeComponent","paddedKey","k","linkToXmapping","distanceSortedLinks","values","sort","distance","elevationOccupied","max","record","linkBegin","min","linkEnd","reserveElevationAirSpace","top","calculateLinkElevations","NucleotideTooltip","MouseTooltip","visible","offsetX","offsetY","style","background","cellToolTipContent","ControlHeader","percentage","size","diff","floor","getPath","getNucPos","addr","pathIndexServerAddress","path_name","nuc_pos","binWidth","httpGetAsync","result","alert","ceil","target","value","options","selectedIndex","setIndexSelectedZoomLevel","indexSelZoomLevel","indexSelectedZoomLevel","availableZoomLevels","id","className","type","defaultValue","onChange","tryJSONpath","title","marginLeft","decIndexSelectedZoomLevel","change_zoom_level","incIndexSelectedZoomLevel","shift","readOnly","list","placeholder","updatePathNucPos","handleJump","Fragment","updateBinScalingFactor","updateHeight","updateWidth","VerticalCompressedViewSwitch","checked","toggleUseVerticalCompression","RenderConnectorSwitch","toggleUseConnector","WidthCompressedViewSwitch","toggleUseWidthCompression","stringToColorAndOpacity","highlightedLinkColumn","selectedLink","colorKey","whichLinkToConsider","stringToColourSave","toString","hash","charCodeAt","colour","App","layerRef","createRef","layerRef2","layerRef3","timerHighlightingLink","timerSelectionLink","componentDidMount","clientHeight","document","getElementById","getElementsByClassName","position","buttonsHeight","current","getCanvas","_canvas","_updateHighlightedNode","linkRect","highlightedLink","recalcXLayout","clearTimeout","setTimeout","renderNucleotidesSchematic","loading","chunkBeginBin","getChunkBeginEndBin","nucleotides_slice","visibleHeight","schematize","actualWidth","updateSchematicMetadata","chunkURLs","fetchAllChunks","recalcY","calculateBinWidthOfScreen","chunk","jsonFetch","loadJsonCache","warn","processArray","maxNumRowsAcrossComponents","calcMaxNumRowsAcrossComponents","columnsInComponents","accumulator","currentValue","paddingBetweenComponents","links","updateTopOffset","prevProps","prevState","snapshot","maxNumberRowsInOneComponent","numberOccupants","filter","Boolean","widthInCells","firstDepartureColumn","renderLinkColumn","leftPad","localColor","localOpacity","localStroke","renderComponent","renderLink","fontSize","zIndex","minWidth","leftOffset","ref","renderSortedLinks","loadingMessage","renderSchematic","window","location","hostname","match","BeginEndBin","types","optional","array","integer","ChunkURLs","string","ChunkFastaURLs","ChunkBeginEndBin","PathNucPos","model","path","nucPos","maximumHeightThisFrame","chunkBeginEndBin","pathNucPos","pangenomelast_bin","actions","self","newBegin","newEnd","round","newTopOffset","isSafeInteger","updateHighlightedLink","latestHeight","resetRenderStats","newContents","newFactor","arrayOfFile","every","e","indexOf","newChunkBeginBin","newChunkEndBin","getPathNucPos","views","create","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6ce94eff.chunk.js","sourcesContent":["/// a collection of functions to deal with URL requests\n\nexport function urlExists(dataName) {\n  if (dataName === \"\") {\n    return false;\n  } else {\n    //source: https://stackoverflow.com/a/22011478/3067894\n    var http = new XMLHttpRequest();\n    http.open(\"HEAD\", process.env.PUBLIC_URL + dataName, false);\n    http.send();\n    return http.status !== 404;\n  }\n}\n\nexport async function httpGetAsync(theUrl, callback) {\n  var xmlHttp = new XMLHttpRequest();\n  xmlHttp.onreadystatechange = function () {\n    if (xmlHttp.readyState === 4 && xmlHttp.status === 200)\n      callback(xmlHttp.responseText);\n  };\n  await xmlHttp.open(\"GET\", theUrl, true); // true for asynchronous\n  xmlHttp.send(null);\n}\n","import React from \"react\";\nimport { observe } from \"mobx\";\n\nimport { urlExists } from \"./URL\";\n\nfunction range(start, end) {\n  return [...Array(1 + end - start).keys()].map((v) => start + v);\n}\n\nclass PangenomeSchematic extends React.Component {\n  constructor(props) {\n    /*Only plain objects will be made observable. For non-plain objects it is considered the\n\t\t responsibility of the constructor to initialize the observable properties. Either use\n\t\t the @observable annotation or the extendObservable function.*/\n\n    super(props);\n    this.pathNames = [];\n    this.components = [];\n    this.chunkIndex = null;\n    //TODO: replace jsonCache with browser indexdb\n    this.jsonCache = {}; // URL keys, values are entire JSON file datas\n    this.chunksProcessed = []; //list of URLs now in this.components\n\n    // Added nucleotides attribute and its edges\n    this.nucleotides = [];\n\n    this.loadIndexFile(this.props.store.jsonName); //initializes this.chunkIndex\n    //whenever jsonName changes,\n    observe(this.props.store, \"jsonName\", () => {\n      this.loadIndexFile(this.props.store.jsonName);\n    });\n\n    // Whenever the selected zoom level changes\n    observe(this.props.store, \"indexSelectedZoomLevel\", () => {\n      this.loadIndexFile(this.props.store.jsonName);\n    });\n\n    observe(\n      this.props.store.beginEndBin,\n      this.openRelevantChunksFromIndex.bind(this)\n    );\n\n    // The FASTA files are read only when there are new chuncks to read\n    observe(this.props.store.chunkFastaURLs, () => {\n      this.loadFasta();\n    });\n\n    // console.log(\"public \", process.env.PUBLIC_URL ) //PUBLIC_URL is empty\n  }\n  componentDidUpdate() {\n    // console.log(\"#components: \" + this.components);\n  }\n\n  /** Compares bin2file @param indexContents with the beginBin and EndBin.\n   * It finds the appropriate chunk URLS from the index and updates\n   * switchChunkURLs which trigger json fetches for the new chunks. */\n  openRelevantChunksFromIndex() {\n    if (this.chunkIndex === null) {\n      return; //before the class is fully initialized\n    }\n    let indexContents = this.chunkIndex;\n    const beginBin = this.props.store.getBeginBin();\n    const endBin = this.props.store.getEndBin();\n\n    this.props.store.setAvailableZoomLevels(\n      Object.keys(indexContents[\"zoom_levels\"])\n    );\n    const selZoomLev = this.props.store.getSelectedZoomLevel();\n\n    const lastIndex =\n      indexContents[\"zoom_levels\"][selZoomLev][\"files\"].length - 1;\n\n    const findBegin = (entry) => entry[\"last_bin\"] >= beginBin;\n    const findEnd = (entry) => entry[\"last_bin\"] >= endBin;\n    let beginIndex = indexContents[\"zoom_levels\"][selZoomLev][\n      \"files\"\n    ].findIndex(findBegin);\n    let endIndex = indexContents[\"zoom_levels\"][selZoomLev][\"files\"].findIndex(\n      findEnd\n    );\n    if (-1 === endIndex) {\n      //#22 end of file limits so it doesn't crash\n      endIndex = lastIndex;\n    }\n    if (-1 === beginIndex) {\n      console.error(\"beginIndex\", beginIndex, \"endIndex\", endIndex);\n      return;\n      // conserving beginIndex if -1 < beginIndex < lastIndex\n      // const indexToCompare = [beginIndex, lastIndex];\n      // const findMinBegin = (index) => index >= 0;\n      // beginIndex = indexToCompare[indexToCompare.findIndex(findMinBegin)]; //trueBeginIndex\n      // endIndex = lastIndex;\n    }\n\n    //will trigger chunk update in App.fetchAllChunks() which calls this.loadJsonCache\n    let URLprefix =\n      process.env.PUBLIC_URL +\n      \"test_data/\" +\n      this.props.store.jsonName +\n      \"/\" +\n      selZoomLev +\n      \"/\";\n    let fileArray = range(beginIndex, endIndex).map((index) => {\n      return (\n        URLprefix +\n        indexContents[\"zoom_levels\"][selZoomLev][\"files\"][index][\"file\"]\n      );\n    });\n    this.props.store.switchChunkURLs(fileArray);\n\n    // To know from which FASTA files load the nucleotides to visualized\n    let fileArrayFasta = range(beginIndex, endIndex).map((index) => {\n      return (\n        URLprefix +\n        indexContents[\"zoom_levels\"][selZoomLev][\"files\"][index][\"fasta\"]\n      );\n    });\n    this.props.store.switchChunkFastaURLs(fileArrayFasta);\n\n    // To know which region the chunks cover\n    this.props.store.setChunkBeginEndBin(\n      indexContents[\"zoom_levels\"][selZoomLev][\"files\"][beginIndex][\n        \"first_bin\"\n      ],\n      indexContents[\"zoom_levels\"][selZoomLev][\"files\"][endIndex][\"last_bin\"]\n    );\n  }\n\n  loadIndexFile(jsonFilename) {\n    let indexPath =\n      process.env.PUBLIC_URL + \"test_data/\" + jsonFilename + \"/bin2file.json\";\n    console.log(\"Reading\", indexPath);\n    return fetch(indexPath)\n      .then((res) => res.json())\n      .then((json) => {\n        // This following part is important to scroll right and left on browser\n        this.chunkIndex = json;\n        this.openRelevantChunksFromIndex();\n      });\n  }\n\n  jsonFetch(filepath) {\n    if (!filepath)\n      throw new Error(\n        \"No filepath given. Ensure chunknames in bin2file.json are correct.\"\n      );\n    console.log(\"Fetching\", filepath);\n    return fetch(process.env.PUBLIC_URL + filepath).then((res) => res.json());\n  }\n\n  loadJsonCache(url, data) {\n    if (data.json_version !== 14) {\n      throw MediaError(\n        \"Wrong Data JSON version: was expecting version 14, got \" +\n        data.json_version +\n        \".  \" +\n        \"This version added precaculated X values.  \" + // KEEP THIS UP TO DATE!\n          \"Using a mismatched data file and renderer will cause unpredictable behavior,\" +\n          \" instead generate a new data file using github.com/graph-genome/component_segmentation.\"\n      );\n    }\n    this.jsonCache[url] = data;\n    this.pathNames = data.path_names; //TODO: in later JSON versions path_names gets moved to bin2file.json\n    this.props.store.setBinWidth(parseInt(data.bin_width));\n  }\n\n  loadFasta() {\n    console.log(\"loadFasta\");\n\n    // Clear the nucleotides information\n    this.nucleotides = [];\n\n    // This loop will automatically cap out at the fasta file corrisponding to the last loaded chunk\n    for (let path_fasta of this.props.store.getChunkFastaURLs()) {\n      if (urlExists(path_fasta)) {\n        fetch(path_fasta)\n          .then((response) => {\n            return response.text();\n          })\n          .then((text) => {\n            const sequence = text\n              .replace(/.*/, \"\")\n              .substr(1)\n              .replace(/[\\r\\n]+/gm, \"\");\n\n            //split into array of nucleotides\n            this.nucleotides.push(...sequence.split(\"\"));\n\n            console.log(\"fetching_fasta: \", path_fasta);\n\n            return;\n          });\n      }\n    }\n  }\n\n  /**Parses beginBin to endBin range, returns false if new file needed.\n   * This calculates the pre-render for all contiguous JSON data.\n   * State information is stored in this.chunksProcessed.\n   * Checks if there's new available data to pre-render in processArray()\n   * run through list of urls in order and see if we have data to load.**/\n  processArray() {\n    let [beginBin, endBin] = [\n      this.props.store.getBeginBin(),\n      this.props.store.getEndBin(),\n    ];\n    let urls = this.props.store.getChunkURLs();\n    if (\n      this.chunksProcessed.length === 0 ||\n      this.chunksProcessed[0] !== urls[0]\n    ) {\n      this.components = []; // clear all pre-render data\n      this.chunksProcessed = [];\n    }\n    // may have additional chunks to pre-render\n    console.log(\"Parsing components \", beginBin, \" - \", endBin);\n\n    for (let urlIndex = 0; urlIndex < urls.length; urlIndex++) {\n      //if end of pre-render is earlier than end of contiguous available chunks, process new data\n      if (urlIndex >= this.chunksProcessed.length) {\n        if (urls[urlIndex] in this.jsonCache) {\n          //only process if data is available\n          let url = urls[urlIndex];\n          let jsonChunk = this.jsonCache[url];\n          let xOffset = this.components.length\n            ? this.components.slice(-1)[0].nextXOffset()\n            : 0;\n          for (let [index, component] of jsonChunk.components.entries()) {\n            let componentItem = new Component(component, xOffset, index);\n            xOffset = componentItem.nextXOffset();\n            this.components.push(componentItem); //TODO: concurrent modification?\n            //if (component.last_bin >= beginBin) { NOTE: we are now reading in whole chunk, this may place\n            //xOffset further right than it was intended when beginBin > chunk.first_bin\n          }\n          this.chunksProcessed.push(url);\n        } else {\n          //we've run into a contiguous chunk that is not available yet\n          return false;\n        }\n      }\n    }\n\n    console.log(\n      \"processArray\",\n      this.chunksProcessed[0],\n      this.chunksProcessed.slice(-1)[0]\n    );\n    //console.log(this.props)\n\n    return true;\n  }\n}\n\nclass Component {\n  constructor(component, offsetLength, index) {\n    this.offset = offsetLength;\n    this.index = index;\n    this.firstBin = component.first_bin;\n    this.lastBin = component.last_bin;\n    this.arrivals = [];\n    for (let arrival of component.arrivals) {\n      this.arrivals.push(new LinkColumn(arrival));\n    }\n    this.departures = [];\n    for (let departure of component.departures) {\n      //don't slice off adjacent here\n      this.departures.push(new LinkColumn(departure));\n    }\n    // we do not know the x val for this component, yet\n    this.x = 0;\n    // deep copy of occupants\n    this.occupants = Array.from(component.occupants);\n    this.matrix = Array.from(component.matrix);\n    this.num_bin = this.lastBin - this.firstBin + 1;\n  }\n  nextXOffset() {\n    return this.offset + this.arrivals.length + this.departures.length - 1;\n  }\n}\n\nclass LinkColumn {\n  constructor(linkColumn) {\n    this.upstream = linkColumn.upstream;\n    this.downstream = linkColumn.downstream;\n    this.participants = linkColumn.participants; //new Set\n    this.key = this.edgeToKey();\n  }\n  edgeToKey() {\n    /**downstream and upstream are always in the same orientation regardless of if it is a\n     * departing LinkColumn or an arriving LinkColumn.**/\n    return (\n      String(this.downstream).padStart(13, \"0\") +\n      String(this.upstream).padStart(13, \"0\")\n    );\n  }\n}\n\nexport default PangenomeSchematic;\n","import React from \"react\";\nimport { Rect, Text } from \"react-konva\";\nimport PropTypes from \"prop-types\";\n\nexport class ConnectorRect extends React.Component {\n  state = {\n    color: this.props.color,\n  };\n\n  render() {\n    return (\n      <Rect\n        x={this.props.x}\n        y={this.props.y}\n        width={this.props.width}\n        height={this.props.height || 1}\n        fill={this.state.color}\n      />\n    );\n  }\n}\n\nConnectorRect.propTypes = {\n  x: PropTypes.number,\n  y: PropTypes.number,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  store: PropTypes.node,\n  color: PropTypes.node,\n};\n\nexport class MatrixCell extends React.Component {\n  onHover() {\n    //tooltip: this.props.item.mean_pos\n    let tooltipContent = '\"';\n    tooltipContent += this.props.pathName + '\": ';\n    const ranges = this.props.item[2];\n    for (let j = 0; j < ranges.length; j++) {\n      let start = ranges[j][0];\n      let end = ranges[j][1];\n      if (j === 0) {\n        tooltipContent += start + \"-\" + end;\n      } else {\n        tooltipContent += \",\" + start + \"-\" + end;\n      }\n    }\n    this.props.store.updateCellTooltipContent(tooltipContent); //item[2] is array of ranges\n  }\n\n  onLeave() {\n    this.props.store.updateCellTooltipContent(\"\"); // we don't want any tooltip displayed if we leave the cell\n  }\n\n  render() {\n    const inverted = this.props.item[1] > 0.5;\n\n    let color = \"#838383\";\n\n    if (inverted) {\n      color = \"#DE4B39\";\n    }\n\n    if (this.props.item[0] > 1) {\n      color = \"#6A6A6A\";\n    }\n\n    // TODO: if possible, use HTML/CSS to write the '<', avoiding the <Text />s rendering, therefore improving the performance\n    return (\n      <>\n        <Rect\n          x={this.props.x}\n          y={this.props.y}\n          width={this.props.width}\n          height={this.props.height || 1}\n          fill={color}\n        />\n\n        <Text\n          x={this.props.x}\n          y={this.props.y}\n          width={this.props.width}\n          height={this.props.height || 1}\n          align={\"center\"}\n          verticalAlign={\"center\"}\n          text={inverted ? \"<\" : \" \"}\n          onMouseEnter={this.onHover.bind(this)}\n          onMouseLeave={this.onLeave.bind(this)}\n        />\n      </>\n    );\n  }\n}\n\nMatrixCell.propTypes = {\n  store: PropTypes.object,\n  item: PropTypes.node,\n  x: PropTypes.number,\n  y: PropTypes.number,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  color: PropTypes.node,\n  pathName: PropTypes.node,\n};\n","/* eslint-disable require-jsdoc */\nimport React from \"react\";\nimport { Rect } from \"react-konva\";\nimport { MatrixCell, ConnectorRect } from \"./ComponentConnectorRect\";\nimport PropTypes from \"prop-types\";\n\nconst zip = (arr, ...arrs) => {\n  /*Credit: https://gist.github.com/renaudtertrais/25fc5a2e64fe5d0e86894094c6989e10*/\n  return arr.map((val, i) => arrs.reduce((a, arr) => [...a, arr[i]], [val]));\n};\n\nexport function compress_visible_rows(components) {\n  /*Returns a Map with key of the original row number and value of the new, compressed row number.\n   * Use this for y values of occupancy and LinkColumn cells.  */\n  let rows_present = find_rows_visible_in_viewport(components);\n  let row_mapping = {};\n  let rows_encountered = 0;\n  for (let i = 0; i < rows_present.length; i++) {\n    if (rows_present[i]) {\n      row_mapping[i] = rows_encountered;\n      rows_encountered++;\n    }\n  }\n  return row_mapping;\n}\n\nfunction find_rows_visible_in_viewport(components) {\n  /*The only components passed to this method are the components on the screen.\n   * This returns a boolean list of which rows are on the screen. */\n  // let rows_present = new Array(components[0].occupants.length).fill(false);\n  if (components.length) {\n    let per_row = zip(...components.map((x) => x.occupants));\n    let rows_present = per_row.map((row) => row.some((x) => x));\n    return rows_present;\n  } else {\n    return [false];\n  }\n}\n\nfunction sum(a, b) {\n  return a + b;\n}\n\nclass ComponentRect extends React.Component {\n  state = {\n    color: \"lightgray\",\n  };\n\n  handleClick = () => {\n    if (this.state.color === \"lightgray\") {\n      this.setState({ color: \"lightblue\" });\n    } else if (this.state.color === \"lightblue\") {\n      this.setState({ color: \"lightgray\" });\n    }\n  };\n\n  renderMatrix() {\n    let count = 0;\n    let parts = this.props.item.matrix.map((row, row_n) => {\n      if (row.length) {\n        count++;\n        return this.renderMatrixRow(row, count, row_n);\n      } else {\n        return null;\n      }\n    });\n    this.props.store.updateMaxHeight(count); //Set max observed occupants in mobx store for render height\n    return <>{parts}</>;\n  }\n\n  renderMatrixRow(row, count, row_n) {\n    const parent = this.props.item;\n    const x_val =\n      parent.x + parent.arrivals.length * this.props.store.pixelsPerColumn;\n    const width = 1 * this.props.store.pixelsPerColumn;\n    let this_y = count;\n    if (!this.props.store.useVerticalCompression) {\n      if (!this.props.compressed_row_mapping.hasOwnProperty(row_n)) {\n        return null; // we need compressed_y and we don't have it.  give up\n      }\n      this_y = this.props.compressed_row_mapping[row_n];\n    }\n\n    return row.map((cell, x) => {\n      if (cell.length) {\n        return (\n          <>\n            <MatrixCell\n              key={\"occupant\" + row_n + x}\n              item={cell}\n              store={this.props.store}\n              pathName={this.props.pathNames[row_n]}\n              x={x_val + x * this.props.store.pixelsPerColumn}\n              y={\n                this_y * this.props.store.pixelsPerRow +\n                this.props.store.topOffset\n              }\n              row_number={row_n}\n              width={width}\n              height={this.props.store.pixelsPerRow}\n            />\n          </>\n        );\n      } else {\n        return null;\n      }\n    });\n  }\n\n  renderAllConnectors() {\n    const departures = this.props.item.departures;\n    let connectorsColumn = departures.slice(-1)[0];\n    if (connectorsColumn !== undefined) {\n      //count starts at the sum(sum(departure columns)) so that it's clear\n      // adjacent connectors are alternatives to LinkColumns\n      let count = 0;\n      if (departures.length > 1) {\n        count += departures\n          .slice(0, -1)\n          .map((column) => {\n            return column.participants.reduce(sum);\n          })\n          .reduce(sum); // sum of trues in all columns\n      }\n      return (\n        <>\n          {connectorsColumn.participants.map((useConnector, j) => {\n            if (useConnector) {\n              count++;\n              return this.renderComponentConnector(useConnector, count, j);\n            } else {\n              return null;\n            }\n          })}\n        </>\n      );\n    } else {\n      return null;\n    }\n  }\n  renderComponentConnector(useConnector, count, j) {\n    let component = this.props.item;\n    // x is the (num_bins + num_arrivals + num_departures)*pixelsPerColumn\n    const x_val =\n      component.x +\n      (component.arrivals.length +\n        (this.props.store.useWidthCompression\n          ? this.props.store.binScalingFactor\n          : component.num_bin) +\n        component.departures.length -\n        1) *\n        this.props.store.pixelsPerColumn;\n    let this_y = count;\n    if (!this.props.store.useVerticalCompression) {\n      this_y = this.props.compressed_row_mapping[j];\n    }\n    return (\n      <ConnectorRect\n        key={\"connector\" + j}\n        x={x_val}\n        y={\n          this.props.store.topOffset +\n          this_y * this.props.store.pixelsPerRow +\n          this.props.store.nucleotideHeight\n        }\n        width={this.props.store.pixelsPerColumn} //Clarified and corrected adjacent connectors as based on pixelsPerColumn width #9\n        height={this.props.store.pixelsPerRow}\n        color={\"#464646\"}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <Rect\n          x={this.props.item.x}\n          y={this.props.store.topOffset}\n          width={this.props.width * this.props.store.pixelsPerColumn}\n          height={this.props.height * this.props.store.pixelsPerRow} //TODO: change to compressed height\n          fill={this.state.color}\n          onClick={this.handleClick}\n        ></Rect>\n        {!this.props.store.useWidthCompression ? this.renderMatrix() : null}\n        {this.props.store.useConnector ? this.renderAllConnectors() : null}\n      </>\n    );\n  }\n}\n\nComponentRect.propTypes = {\n  store: PropTypes.object,\n  item: PropTypes.object,\n  compressed_row_mapping: PropTypes.object,\n  width: PropTypes.node,\n  height: PropTypes.node,\n  pathNames: PropTypes.node,\n};\n\nexport default ComponentRect;\n","/* eslint-disable require-jsdoc */\nimport React from \"react\";\nimport { Rect, Text } from \"react-konva\";\nimport PropTypes from \"prop-types\";\n\nclass ComponentNucleotides extends React.Component {\n  renderMatrix() {\n    //console.log(\"ComponentNucleotides: \" + this.props.nucleotides);\n\n    let count = 0;\n    let parts = this.props.item.matrix.map((row, row_n) => {\n      //console.log('row.length: ' + row.length)\n      if (row.length) {\n        count++;\n\n        // TO_DO: why is this checks needed?\n        // To avoid many unnecessary operations, improving the performance\n        if (count === 1) {\n          return this.renderMatrixRow(row, row_n);\n        }\n      }\n\n      return null;\n    });\n\n    return <>{parts}</>;\n  }\n\n  renderMatrixRow(row, row_n) {\n    const parent = this.props.item;\n    const x_val =\n      parent.x + parent.arrivals.length * this.props.store.pixelsPerColumn;\n    const width = 1 * this.props.store.pixelsPerColumn;\n\n    //console.log('renderMatrixRow - row_n: ' + row_n)\n    //console.log('x_val: ' + x_val)\n\n    return row.map((cell, x) => {\n      if (cell.length) {\n        //console.log(\"this.props.nucleotides: \" + this.props.nucleotides + \"; x: \" + x)\n\n        return (\n          <>\n            <Text\n              x={x_val + x * this.props.store.pixelsPerColumn}\n              y={this.props.store.topOffset - this.props.store.nucleotideHeight}\n              text={this.props.nucleotides[x]}\n              align=\"center\"\n              height={this.props.store.nucleotideHeight}\n              width={width}\n            />\n          </>\n        );\n      } else {\n        return null;\n      }\n    });\n  }\n\n  render() {\n    //console.log('ComponentNucleotides - render')\n    return (\n      <>\n        <Rect\n          x={this.props.item.x}\n          y={this.props.store.topOffset + this.props.store.nucleotideHeight}\n          width={this.props.width * this.props.store.pixelsPerColumn}\n          height={this.props.height * this.props.store.pixelsPerRow}\n        />\n        {this.renderMatrix()}\n      </>\n    );\n  }\n}\n\nComponentNucleotides.propTypes = {\n  store: PropTypes.object,\n  item: PropTypes.object,\n  width: PropTypes.node,\n  height: PropTypes.node,\n};\n\nexport default ComponentNucleotides;\n","import React from \"react\";\nimport { Rect } from \"react-konva\";\nimport PropTypes from \"prop-types\";\n\nclass LinkColumn extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseOut = this.handleMouseOut.bind(this);\n    this.handleMouseOver = this.handleMouseOver.bind(this);\n  }\n  handleMouseOver() {\n    this.props.updateHighlightedNode(this.props.item);\n  }\n  handleMouseOut() {\n    this.props.updateHighlightedNode(null);\n  }\n  linkCells() {\n    let alpha = [];\n    let count = 1; // Link columns appear to be 1 higher than occupants and conncetors\n    for (const [i, isPresent] of this.props.item.participants.entries()) {\n      if (isPresent) {\n        let this_y = count++;\n        if (!this.props.store.useVerticalCompression) {\n          if (!this.props.compressed_row_mapping.hasOwnProperty(i)) {\n            continue; //we're stuck: we need row_mapping but it's not present\n          }\n          this_y = this.props.compressed_row_mapping[i];\n        }\n        let row = this_y * this.props.store.pixelsPerRow;\n        alpha.push(row); //relative compressed Y coordinate\n      }\n    }\n    return alpha;\n  }\n  componentDidMount() {\n    this.setState({\n      color: this.props.color,\n    });\n  }\n  render() {\n    const contents = this.linkCells();\n    return (\n      <>\n        {contents.map((y_coord, d) => {\n          return (\n            <Rect\n              key={\"dot\" + d}\n              x={this.props.x}\n              y={\n                this.props.store.topOffset +\n                y_coord +\n                this.props.store.nucleotideHeight\n              }\n              width={this.props.store.pixelsPerColumn}\n              height={this.props.store.pixelsPerRow}\n              fill={this.props.color}\n              opacity={this.props.opacity}\n              stroke={this.props.stroke}\n              // onClick={this.handleClick}\n              onMouseOver={this.handleMouseOver}\n              onMouseOut={this.handleMouseOut}\n            />\n          );\n        })}\n      </>\n    );\n  }\n}\n\nLinkColumn.propTypes = {\n  store: PropTypes.object,\n  item: PropTypes.object,\n  updateHighlightedNode: PropTypes.func,\n  compressed_row_mapping: PropTypes.object,\n  x: PropTypes.node,\n  column: PropTypes.node,\n  color: PropTypes.node,\n};\n\nexport default LinkColumn;\n","import React from \"react\";\nimport { Arrow } from \"react-konva\";\nimport PropTypes from \"prop-types\";\n\nfunction isInfinity(n) {\n  return !Number.isFinite(n);\n}\n\nclass LinkArrow extends React.Component {\n  /** Serves as a contract to store visual layout information**/\n  constructor(props) {\n    super(props);\n    this.arrowXCoord = null;\n    this.points = [];\n    this.handleMouseOut = this.handleMouseOut.bind(this);\n    this.handleMouseOver = this.handleMouseOver.bind(this);\n  }\n  componentDidUpdate() {\n    //this.calculatePoints(); // AG: is it necessary?\n  }\n\n  calculatePoints() {\n    /*Translates the LinkRecord coordinates into pixels and defines the curve shape.\n     * I've spent way too long fiddling with these numbers at different pixelsPerColumn\n     * I suggest you don't fiddle with them unless you plan on nesting the React\n     * Components to ensure that everything is relative coordinates.*/\n    let link = this.props.link;\n    this.arrowXCoord = this.props.link.xArrival;\n    let absDepartureX = this.props.link.xDepart;\n    // put in relative coordinates to arriving LinkColumn\n    let departureX =\n      absDepartureX - this.arrowXCoord + this.props.store.pixelsPerColumn / 2;\n    let arrX = this.props.store.pixelsPerColumn / 2;\n    let bottom = -2; //-this.props.store.pixelsPerColumn;\n    let turnDirection = departureX < 0 ? -1 : 1;\n    const departOrigin = [departureX, this.props.store.pixelsPerColumn - 2];\n    const departCorner = [departureX - turnDirection, -link.elevation + 2];\n    let departTop = [departureX - turnDirection * 6, -link.elevation];\n    let arriveTop = [arrX + turnDirection * 6, -link.elevation];\n    let arriveCorner = [arrX + turnDirection, -link.elevation + 2]; // 1.5 in from actual corner\n    const arriveCornerEnd = [arrX, -5];\n    this.points = [\n      departOrigin[0],\n      departOrigin[1],\n      departCorner[0],\n      departCorner[1],\n      departTop[0],\n      departTop[1],\n      arriveTop[0],\n      arriveTop[1],\n      arriveCorner[0],\n      arriveCorner[1],\n      arriveCornerEnd[0],\n      arriveCornerEnd[1],\n      arrX,\n      -1,\n    ];\n    if (Math.abs(departureX) <= this.props.store.pixelsPerColumn) {\n      // FIXME Small distances, usually self loops\n      if (link.isArrival) {\n        this.points = [\n          arrX,\n          -10, //-link.elevation - 4,\n          arrX,\n          bottom,\n        ];\n      } else {\n        this.points = [\n          departOrigin[0],\n          bottom + this.props.store.pixelsPerColumn,\n          departOrigin[0],\n          -5,\n        ]; //-link.elevation-this.props.store.pixelsPerColumn*2,];\n      }\n    }\n    if (this.points.some(isNaN) || this.points.some(isInfinity)) {\n      console.log(\"Some points are NaN: \" + this.points);\n    }\n  }\n\n  render() {\n    // if(this.arrowXCoord === null){\n    this.calculatePoints();\n    // }\n    /*upstream={this.props.upstream}\n        downstream={this.props.downstream}\n        */\n\n    return (\n      <Arrow\n        x={this.arrowXCoord}\n        y={this.props.store.topOffset - 10}\n        width={this.props.store.pixelsPerColumn}\n        points={this.points}\n        bezier={false}\n        strokeWidth={this.props.store.pixelsPerColumn}\n        fill={this.props.color}\n        stroke={this.props.color}\n        opacity={this.props.opacity}\n        stroke-opacity={this.props.opacity}\n        pointerLength={1}\n        pointerWidth={1}\n        tension={1 / 3}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n        onClick={this.handleClick}\n        // lineCap={'round'}\n      />\n    );\n  }\n\n  handleMouseOver = () => {\n    this.props.updateHighlightedNode(this.props.link.linkColumn);\n  };\n  handleMouseOut = () => {\n    this.props.updateHighlightedNode(null);\n  };\n  handleClick = (event) => {\n    /*Jump on Link click rough draft. Detects which end is closest to the view and\n    jumps to the other side. TODO: Still needs visual highlighting at destination.*/\n    console.log(\"Click\", event, this.props.link);\n\n    const [beginBin, endBin] = this.props.store.getBeginEndBin();\n\n    // TODO: Update the range only if the arrow it is not already contained in the current visualized range\n    if (true) {\n      // Find middle position of viewport\n      let width = endBin - beginBin;\n      let mid_bin = beginBin + width / 2;\n\n      // Compare with ends of arrow coordinates\n      let end_closer =\n        Math.abs(this.props.link.linkColumn.upstream - mid_bin) <\n        Math.abs(this.props.link.linkColumn.downstream - mid_bin);\n\n      // Identify more distant end\n      let destination_bin = end_closer\n        ? this.props.link.linkColumn.downstream\n        : this.props.link.linkColumn.upstream;\n\n      // Calculate beginBin that will place distant end in middle of viewport\n      // The ~~ operator is a double NOT bitwise operator. It is used as a faster substitute for Math.floor().\n      let newBeginBin = ~~(destination_bin - width / 2);\n      let newEndBin = newBeginBin + width;\n\n      this.props.store.updateBeginEndBin(newBeginBin, newEndBin);\n\n      // Called after the bin updating to start the timers after the rendering\n      this.props.updateSelectedLink(this.props.link.linkColumn);\n    }\n  };\n}\n\nLinkArrow.propTypes = {\n  store: PropTypes.object,\n  link: PropTypes.object,\n  color: PropTypes.node,\n  updateHighlightedNode: PropTypes.func,\n  updateSelectedLink: PropTypes.func,\n};\n\nexport default LinkArrow;\n","export class LinkRecord {\n  constructor(linkColumn, xCoordArrival = 0, xCoordDeparture = 0, isArrival) {\n    this.linkColumn = linkColumn;\n    if (linkColumn === undefined) {\n      console.log(linkColumn, xCoordArrival, xCoordDeparture);\n    }\n    this.xArrival = xCoordArrival;\n    this.xDepart = xCoordDeparture;\n    this.elevation = 10;\n    this.isArrival = isArrival;\n  }\n  distance() {\n    return Math.abs(this.xDepart - this.xArrival) || 1;\n  }\n}\n\nexport function calculateLinkCoordinates(\n  schematic,\n  pixelsPerColumn,\n  topOffset,\n  useWidthCompression,\n  binScalingFactor,\n  leftXStart\n) {\n  //leftXStart is necessary as a method at the moment\n  /** calculate the x coordinates of all components\n   * calculate the x coordinates of all arrivals and departures */\n\n  /* In this dictionary the key is the global unique paddedKey created by @edgetoKey.\n    The value is a list of size 2:\n    1. Element: the x-coordinate of the arrival link column\n    2. Element: the x-coordinate of the corresponding departure link column */\n  let linkToXMapping = {}; //(paddedKey): [arrivalX, departureX]\n\n  for (let i = 0; i < schematic.length; i++) {\n    let schematizeComponent = schematic[i];\n    schematizeComponent.x = leftXStart(schematizeComponent, i, 0, 0);\n    //ARRIVALS: Calculate all X\n    for (let j = 0; j < schematizeComponent.arrivals.length; j++) {\n      let arrival = schematizeComponent.arrivals[j];\n      let xCoordArrival = leftXStart(schematizeComponent, i, 0, j);\n      let paddedKey = arrival.key;\n      if (!(paddedKey in linkToXMapping)) {\n        //place holder value, go as far right as possible\n        // TODO place holder value in the same place\n        linkToXMapping[paddedKey] = new LinkRecord(\n          arrival,\n          xCoordArrival,\n          xCoordArrival,\n          true\n        );\n      } else {\n        linkToXMapping[paddedKey].xArrival = xCoordArrival; // set with real value\n      }\n    }\n    //DEPARTURES: Calculate all X\n    for (let k = 0; k < schematizeComponent.departures.length - 1; k++) {\n      let departure = schematizeComponent.departures[k];\n      let xCoordDeparture = leftXStart(\n        schematizeComponent,\n        i,\n        schematizeComponent.arrivals.length +\n          (useWidthCompression\n            ? binScalingFactor\n            : schematizeComponent.num_bin),\n        k\n      );\n      let paddedKey = departure.key;\n      if (!(paddedKey in linkToXMapping)) {\n        //place holder value, go as far left as possible\n        // linkToXMapping[paddedKey] = [this.state.actualWidth + 100, xCoordDeparture]\n        linkToXMapping[paddedKey] = new LinkRecord(\n          departure,\n          xCoordDeparture,\n          xCoordDeparture,\n          false\n        );\n      } else {\n        linkToXMapping[paddedKey].xDepart = xCoordDeparture; // set real value\n      }\n    }\n  }\n  return calculateLinkElevations(linkToXMapping, pixelsPerColumn, topOffset);\n}\n\nfunction calculateLinkElevations(linkToXmapping, pixelsPerColumn, topOffset) {\n  /**Starting with the shortest links, claim a spot of elevation to place the link in.\n   * As the links get bigger, you take the max() of the range of the link and add 1.\n   * This claims the \"air space\" for that link to travel through without colliding with anything.\n   * The longest link should end up on top.  We'll probably need a \"link gutter\" maximum to keep\n   * this from getting unreasonably tall.**/\n  let distanceSortedLinks = Object.values(linkToXmapping).sort(\n    (a, b) => a.distance() - b.distance()\n  );\n  let elevationOccupied = reserveElevationAirSpace(\n    distanceSortedLinks,\n    pixelsPerColumn,\n    topOffset\n  );\n  let top = Math.max(...elevationOccupied) + pixelsPerColumn * 3;\n  return [distanceSortedLinks, top];\n}\n\nfunction reserveElevationAirSpace(\n  distanceSortedLinks,\n  pixelsPerColumn,\n  topOffset\n) {\n  /* Set up an array of zeros, then gradually fill it with height stacking\n   * @Simon this section is largely done, it just needs a sorted distanceSortedLinks as input*/\n  let length = Math.max(\n    0,\n    ...distanceSortedLinks.map((x) => Math.max(x.xDepart, x.xArrival))\n  ); //this.props.endBin - this.props.beginBin;\n  let elevationOccupied = new Array(length).fill(15);\n  for (let record of distanceSortedLinks) {\n    let linkBegin = Math.max(0, Math.min(record.xArrival, record.xDepart));\n    let linkEnd = Math.max(record.xArrival, record.xDepart, linkBegin + 1);\n    let range = elevationOccupied.slice(linkBegin, linkEnd + 1);\n    let elevation = range.length ? Math.max(...range) : 10;\n    if (isNaN(elevation) || !Number.isFinite(elevation)) {\n      console.log(\n        \"Bad elevation\",\n        record,\n        linkBegin,\n        linkEnd,\n        range,\n        elevationOccupied\n      );\n    }\n    const stillSmall = true;//elevation < topOffset / 3;\n    elevation += stillSmall ? pixelsPerColumn : pixelsPerColumn / 4;\n    for (let x = linkBegin; x < linkEnd && x < elevationOccupied.length; x++) {\n      elevationOccupied[x] = elevation;\n    }\n    record.elevation = elevation; //storing final value for render\n  }\n  return elevationOccupied;\n}\n","import React from \"react\";\nimport MouseTooltip from \"react-sticky-mouse-tooltip\";\nimport { Observer } from \"mobx-react\";\nimport PropTypes from \"prop-types\";\n\nexport default class NucleotideTooltip extends React.Component {\n  render() {\n    return (\n      <MouseTooltip\n        visible={true}\n        offsetX={15}\n        offsetY={-20}\n        style={{ background: \"white\" }}\n      >\n        <Observer>\n          {() => <span>{this.props.store.cellToolTipContent}</span>}\n        </Observer>\n      </MouseTooltip>\n    );\n  }\n}\n\nNucleotideTooltip.propTypes = {\n  store: PropTypes.object,\n};\n","import React from \"react\";\nimport { Observer } from \"mobx-react\";\nimport { httpGetAsync } from \"./URL\";\nimport PropTypes from \"prop-types\";\n\nclass ControlHeader extends React.Component {\n  shift(percentage) {\n    const beginBin = this.props.store.getBeginBin();\n    const endBin = this.props.store.getEndBin();\n    let size = endBin - beginBin;\n    let diff = Math.floor(size * (percentage / 100));\n    console.log(endBin + \"-\" + beginBin + \"=\" + size + \" --> diff: \" + diff);\n    this.props.store.updateBeginEndBin(beginBin + diff, endBin + diff);\n  }\n\n  handleJump() {\n    console.log(\n      \"JUMP: path name: \" +\n        this.props.store.getPath() +\n        \" nucleotide position: \" +\n        this.props.store.getNucPos()\n    );\n    // I don't know why, but in order for the CORS headers to exchange we need to make a first GET request to \"/hi\" which will not return anything\n\n    const store = this.props.store;\n    const addr = store.pathIndexServerAddress;\n    const path_name = store.getPath();\n    const nuc_pos = store.getNucPos();\n    const binWidth = store.binWidth;\n\n    function handleOdgiServerResponse(result) {\n      if (result === \"0\") {\n        alert(\n          \"The jump query returned 0. Either your path does not exist or your position in the path is wrong. Please try again.\"\n        );\n      } else {\n        console.log(result);\n        // go from nucleotide position to bin\n        result = parseInt(result);\n        const newBeginBin = Math.ceil(result / binWidth);\n        console.log(newBeginBin);\n        store.updateBeginEndBin(newBeginBin, store.getEndBin());\n      }\n    }\n    // httpGetAsync(addr + \"hi\", printResult);\n    // httpGetAsync(addr + \"5/1\", printResult);\n    // httpGetAsync(addr + \"4/3\", printResult);\n    httpGetAsync(addr + path_name + \"/\" + nuc_pos, handleOdgiServerResponse);\n  }\n\n  // AG\n  change_zoom_level(target) {\n    console.log(\n      \"change_zoom_level: \" +\n        target.value +\n        \" ---\" +\n        target.options[target.selectedIndex].text\n    );\n\n    this.props.store.setIndexSelectedZoomLevel(parseInt(target.value));\n  }\n\n  decIndexSelectedZoomLevel() {\n    let indexSelZoomLevel = this.props.store.indexSelectedZoomLevel;\n    if (indexSelZoomLevel > 0) {\n      this.props.store.setIndexSelectedZoomLevel(indexSelZoomLevel - 1);\n    }\n  }\n\n  incIndexSelectedZoomLevel() {\n    let indexSelZoomLevel = this.props.store.indexSelectedZoomLevel;\n    if (indexSelZoomLevel < this.props.store.availableZoomLevels.length - 1) {\n      this.props.store.setIndexSelectedZoomLevel(indexSelZoomLevel + 1);\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"button-container\">\n        <button className=\"button\" id=\"btn-download\">\n          Save Image\n        </button>\n        <input\n          type=\"text\"\n          defaultValue={this.props.store.jsonName}\n          style={{ width: \"330px\" }}\n          onChange={this.props.store.tryJSONpath}\n          title={\"File:\"}\n        />\n        <span style={{ marginLeft: \"30px\" }}>\n          Bin width:\n          <button\n            className=\"button\"\n            onClick={() => this.decIndexSelectedZoomLevel()}\n          >\n            -\n          </button>\n          <select\n            id=\"select_bin_width\"\n            onChange={(val) => this.change_zoom_level(val.target)}\n            value={this.props.store.indexSelectedZoomLevel}\n          >\n            {this.props.store.availableZoomLevels.map((item, i) => (\n              <option key={i} value={i}>\n                {item}\n              </option>\n            ))}\n          </select>\n          <button\n            className=\"button\"\n            onClick={() => this.incIndexSelectedZoomLevel()}\n          >\n            +\n          </button>\n        </span>\n\n        <span style={{ marginLeft: \"30px\" }}>\n          <button className=\"button\" onClick={() => this.shift(-100)}>\n            &lt;&lt;\n          </button>\n          <button className=\"button\" onClick={() => this.shift(-50)}>\n            &lt;\n          </button>\n          Pangenome Bin Position:\n          <Observer>\n            {() => (\n              <>\n                <input\n                  type=\"number\"\n                  value={this.props.store.beginEndBin[0]} // TODO Get methods don't work here, but I don't know why. Need to ask Robert Buels.\n                  onChange={(event) =>\n                    this.props.store.updateBeginEndBin(\n                      event.target.value,\n                      this.props.store.getEndBin()\n                    )\n                  }\n                  style={{ width: \"80px\" }}\n                />\n                -\n                <input\n                  type=\"number\"\n                  value={this.props.store.beginEndBin[1]}\n                  readOnly\n                  style={{ width: \"80px\" }}\n                />\n              </>\n            )}\n          </Observer>\n          <button className=\"button\" onClick={() => this.shift(50)}>\n            &gt;\n          </button>\n          <button className=\"button\" onClick={() => this.shift(100)}>\n            &gt;&gt;\n          </button>\n        </span>\n        <div className={\"row\"}>\n          Jump to path at nucleotide position:\n          <input\n            type=\"string\"\n            list=\"path\"\n            placeholder={\"path\"}\n            onChange={(event) =>\n              this.props.store.updatePathNucPos(\n                event.target.value,\n                this.props.store.getNucPos()\n              )\n            }\n            style={{ width: \"80px\" }}\n          />\n          <datalist id=\"path\">\n            {this.props.schematic.pathNames.map((item, key) => (\n              <option key={key} value={item} />\n            ))}\n          </datalist>\n          -\n          <input\n            type=\"number\"\n            placeholder={\"position\"}\n            onChange={(event) =>\n              this.props.store.updatePathNucPos(\n                this.props.store.getPath(),\n                event.target.value\n              )\n            }\n            style={{ width: \"80px\" }}\n          />\n          <span style={{ marginLeft: \"2px\" }}>\n            <button className=\"button\" onClick={() => this.handleJump()}>\n              Jump\n            </button>\n          </span>\n        </div>\n        <div className={\"row\"}>\n          <span>\n            {\" \"}\n            Use Vertical Compression:\n            <VerticalCompressedViewSwitch store={this.props.store} />\n          </span>\n          <span>\n            {\" \"}\n            Use Width Compression:\n            <WidthCompressedViewSwitch store={this.props.store} />\n          </span>\n          {this.props.store.useWidthCompression ? (\n            <React.Fragment>\n              <span>\n                {\" \"}\n                Render Connectors:\n                <RenderConnectorSwitch store={this.props.store} />\n              </span>\n              <span>\n                {\" \"}\n                Component Width Scaling Factor:\n                <Observer>\n                  {() => (\n                    <input\n                      type=\"number\"\n                      min={1}\n                      value={this.props.store.binScalingFactor}\n                      onChange={this.props.store.updateBinScalingFactor}\n                      style={{ width: \"30px\" }}\n                    />\n                  )}\n                </Observer>\n              </span>\n            </React.Fragment>\n          ) : (\n            <></>\n          )}\n          <span>\n            {\" \"}\n            Row Height:\n            <input\n              type=\"number\"\n              min={1}\n              value={this.props.store.pixelsPerRow}\n              onChange={this.props.store.updateHeight}\n              style={{ width: \"30px\" }}\n            />\n          </span>\n          <span>\n            {\" \"}\n            Column Width:\n            <input\n              type=\"number\"\n              min={1}\n              value={this.props.store.pixelsPerColumn}\n              onChange={this.props.store.updateWidth}\n              style={{ width: \"30px\" }}\n            />\n          </span>\n        </div>\n      </div>\n    );\n  }\n}\n\nControlHeader.propTypes = {\n  store: PropTypes.object,\n};\n\nclass VerticalCompressedViewSwitch extends React.Component {\n  render() {\n    return (\n      <Observer>\n        {() => (\n          <input\n            type=\"checkbox\"\n            checked={this.props.store.useVerticalCompression}\n            onChange={this.props.store.toggleUseVerticalCompression}\n          />\n        )}\n      </Observer>\n    );\n  }\n}\n\nVerticalCompressedViewSwitch.propTypes = {\n  store: PropTypes.object,\n};\n\nclass RenderConnectorSwitch extends React.Component {\n  render() {\n    return (\n      <Observer>\n        {() => (\n          <input\n            type=\"checkbox\"\n            checked={this.props.store.useConnector}\n            onChange={this.props.store.toggleUseConnector}\n          />\n        )}\n      </Observer>\n    );\n  }\n}\n\nRenderConnectorSwitch.propTypes = {\n  store: PropTypes.object,\n};\n\nclass WidthCompressedViewSwitch extends React.Component {\n  render() {\n    return (\n      <Observer>\n        {() => (\n          <input\n            type=\"checkbox\"\n            checked={this.props.store.useWidthCompression}\n            onChange={this.props.store.toggleUseWidthCompression}\n          />\n        )}\n      </Observer>\n    );\n  }\n}\n\nWidthCompressedViewSwitch.propTypes = {\n  store: PropTypes.object,\n};\n\nexport default ControlHeader;\n","import { Layer, Stage } from \"react-konva\";\nimport React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport PangenomeSchematic from \"./PangenomeSchematic\";\nimport ComponentRect, { compress_visible_rows } from \"./ComponentRect\";\nimport ComponentNucleotides from \"./ComponentNucleotides\";\nimport LinkColumn from \"./LinkColumn\";\nimport LinkArrow from \"./LinkArrow\";\nimport { calculateLinkCoordinates } from \"./LinkRecord\";\nimport NucleotideTooltip from \"./NucleotideTooltip\";\nimport ControlHeader from \"./ControlHeader\";\nimport { observe } from \"mobx\";\nimport { Text } from \"react-konva\";\n\nfunction stringToColorAndOpacity(\n  linkColumn,\n  highlightedLinkColumn,\n  selectedLink\n) {\n  const colorKey = (linkColumn.downstream + 1) * (linkColumn.upstream + 1);\n\n  const whichLinkToConsider = selectedLink\n    ? selectedLink\n    : highlightedLinkColumn;\n\n  // When the mouse in on a Link, all the other ones will become gray and fade out\n\n  if (\n    // Check if the mouse in on a Link (highlightedLinkColumn) or if a Link was clicked (selectedLink)\n    (!highlightedLinkColumn && !selectedLink) ||\n    colorKey ===\n      (whichLinkToConsider.downstream + 1) * (whichLinkToConsider.upstream + 1)\n  ) {\n    return [\n      stringToColourSave(colorKey),\n      1.0,\n      highlightedLinkColumn || selectedLink ? \"black\" : null,\n    ];\n  } else {\n    return [\"gray\", 0.3, null];\n  }\n}\n\nconst stringToColourSave = function (colorKey) {\n  colorKey = colorKey.toString();\n  let hash = 0;\n  for (let i = 0; i < colorKey.length; i++) {\n    hash = colorKey.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  let colour = \"#\";\n  for (let j = 0; j < 3; j++) {\n    const value = (hash >> (j * 8)) & 0xff;\n    colour += (\"00\" + value.toString(16)).substr(-2);\n  }\n  return colour;\n};\n\nclass App extends Component {\n  layerRef = React.createRef();\n  layerRef2 = React.createRef(null);\n  layerRef3 = React.createRef(null);\n  timerHighlightingLink = null;\n  timerSelectionLink = null;\n\n  constructor(props) {\n    super(props);\n\n    this.updateHighlightedNode = this.updateHighlightedNode.bind(this);\n    this.updateSelectedLink = this.updateSelectedLink.bind(this);\n\n    this.state = {\n      schematize: [],\n      pathNames: [],\n      loading: true,\n      actualWidth: 1,\n      buttonsHeight: 0,\n    };\n    this.schematic = new PangenomeSchematic({ store: this.props.store }); //Read file, parse nothing\n\n    observe(\n      this.props.store.beginEndBin,\n      this.updateSchematicMetadata.bind(this)\n    );\n    observe(this.props.store.chunkURLs, this.fetchAllChunks.bind(this));\n    //Arrays must be observed directly, simple objects are observed by name\n    observe(this.props.store, \"pixelsPerRow\", this.recalcY.bind(this));\n    observe(\n      this.props.store,\n      \"useVerticalCompression\",\n      this.recalcY.bind(this)\n    );\n    observe(\n      this.props.store,\n      \"useWidthCompression\",\n      this.recalcXLayout.bind(this)\n    );\n    observe(this.props.store, \"useConnector\", this.recalcXLayout.bind(this));\n    observe(\n      this.props.store,\n      \"binScalingFactor\",\n      this.recalcXLayout.bind(this)\n    );\n    observe(this.props.store, \"pixelsPerColumn\", this.recalcXLayout.bind(this));\n    observe(\n      this.props.store,\n      \"pixelsPerColumn\",\n      this.calculateBinWidthOfScreen.bind(this)\n    );\n  }\n\n  fetchAllChunks() {\n    /*Dispatches fetches for all chunk files\n     * Read https://github.com/graph-genome/Schematize/issues/22 for details\n     */\n    console.log(\"fetchAllChunks\", this.props.store.getChunkURLs());\n    if (!this.props.store.getChunkURLs()[0]) {\n      console.warn(\"No chunk URL defined.\");\n      return;\n    }\n    for (let chunk of this.props.store.chunkURLs) {\n      //TODO: conditional on jsonCache not already having chunk\n      this.schematic\n        .jsonFetch(chunk)\n        .then((data) => this.schematic.loadJsonCache(chunk, data))\n        .then(this.updateSchematicMetadata.bind(this));\n    }\n  }\n\n  updateSchematicMetadata() {\n    if (this.schematic.processArray()) {\n      console.log(\n        \"updateSchematicMetadata #components: \" +\n          this.schematic.components.length\n      );\n\n      // console.log(this.schematic.components);\n      this.setState(\n        {\n          schematize: this.schematic.components,\n          pathNames: this.schematic.pathNames,\n        },\n        () => {\n          this.recalcXLayout();\n          this.compressed_row_mapping = compress_visible_rows(\n            this.schematic.components\n          );\n          this.maxNumRowsAcrossComponents = this.calcMaxNumRowsAcrossComponents(\n            this.schematic.components\n          ); // TODO add this to mobx-state-tree\n          this.setState({ loading: false });\n        }\n      );\n    }\n  }\n\n  recalcXLayout() {\n    console.log(\"recalcXLayout\");\n    const sum = (accumulator, currentValue) => accumulator + currentValue;\n    const columnsInComponents = this.schematic.components\n      .map(\n        (component) =>\n          component.arrivals.length +\n          (component.departures.length - 1) +\n          (this.props.store.useWidthCompression\n            ? this.props.store.binScalingFactor\n            : component.lastBin - component.firstBin) +\n          1\n      )\n      .reduce(sum, 0);\n    const paddingBetweenComponents =\n      this.props.store.pixelsPerColumn * this.schematic.components.length;\n    const actualWidth =\n      columnsInComponents * this.props.store.pixelsPerColumn +\n      paddingBetweenComponents;\n    this.setState({\n      actualWidth: actualWidth,\n    });\n    const [links, top] = calculateLinkCoordinates(\n      this.schematic.components,\n      this.props.store.pixelsPerColumn,\n      this.props.store.topOffset,\n      this.props.store.useWidthCompression,\n      this.props.store.binScalingFactor,\n      this.leftXStart.bind(this)\n    );\n    this.distanceSortedLinks = links;\n    this.props.store.updateTopOffset(parseInt(top));\n  }\n\n  recalcY() {\n    // forceUpdate() doesn't work with callback function\n    this.setState({ highlightedLink: null }); // nothing code to force update.\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (\n      this.props.store.getBeginBin() !== prevProps.store.getBeginBin() ||\n      this.props.store.getEndBin() !== prevProps.store.getEndBin()\n    ) {\n      this.updateSchematicMetadata();\n    }\n  }\n\n  calcMaxNumRowsAcrossComponents(components) {\n    let maxNumberRowsInOneComponent = 0;\n    for (let i = 0; i < components.length; i++) {\n      const component = components[i];\n      const occupants = component.occupants;\n      const numberOccupants = occupants.filter(Boolean).length;\n      maxNumberRowsInOneComponent = Math.max(\n        numberOccupants,\n        maxNumberRowsInOneComponent\n      );\n    }\n    console.log(\n      \"Max number of rows across components: \" + maxNumberRowsInOneComponent\n    );\n\n    return maxNumberRowsInOneComponent;\n  }\n\n  visibleHeight() {\n    if (\n      this.props.store.useVerticalCompression ||\n      !this.compressed_row_mapping\n    ) {\n      // this.state.schematize.forEach(value => Math.max(value.occupants.filter(Boolean).length, maxNumberRowsInOneComponent));\n      if (this.maxNumRowsAcrossComponents === undefined) {\n        this.maxNumRowsAcrossComponents = this.calcMaxNumRowsAcrossComponents(\n          this.schematic.components\n        );\n      }\n      console.log(\n        \"maxNumRowsAcrossComponents\",\n        this.maxNumRowsAcrossComponents\n      );\n      return (\n        (this.maxNumRowsAcrossComponents + 2.5) * this.props.store.pixelsPerRow\n      );\n    } else {\n      return (\n        (Object.keys(this.compressed_row_mapping).length + 0.25) *\n        this.props.store.pixelsPerRow\n      );\n    }\n  }\n\n  calculateBinWidthOfScreen() {\n    let deviceWidth = 1920; // TODO: get width from browser\n    let widthInCells = deviceWidth / this.props.store.pixelsPerColumn;\n\n    // let paddingBetweenComponents = this.props.store.pixelsPerColumn * 20; //guessing number of components\n    let b = this.props.store.getBeginBin();\n    this.props.store.updateBeginEndBin(b, b + widthInCells);\n    //TODO the logic here could be much more complex by looking at the average pixel\n    //width of components and whether vaious settings are on.  The consequence\n    //of overestimating widthInCells is to make the shift buttons step too big\n  }\n\n  UNSAFE_componentWillMount() {\n    this.updateSchematicMetadata();\n  }\n\n  componentDidMount = () => {\n    let buttonContainerDiv = document.getElementById(\"button-container\");\n    let clientHeight = buttonContainerDiv.clientHeight;\n\n    const arrowsDiv = document.getElementsByClassName(\"konvajs-content\")[0];\n    arrowsDiv.style.position = \"relative\";\n\n    this.setState({ buttonsHeight: clientHeight });\n\n    this.layerRef.current.getCanvas()._canvas.id = \"cnvs\";\n    this.layerRef.current.getCanvas()._canvas.position = \"relative\";\n\n    this.layerRef2.current.getCanvas()._canvas.id = \"arrow\";\n    this.layerRef2.current.getCanvas()._canvas.position = \"relative\";\n    //this.layerRef2.current.getCanvas()._canvas.style.top = \"95px\";\n    /*if(this.props.store.useVerticalCompression) {\n      this.props.store.resetRenderStats(); //FIXME: should not require two renders to get the correct number\n    }*/\n  };\n\n  // Now it is wrapped in the updateHighlightedNode() function\n  _updateHighlightedNode = (linkRect) => {\n    this.setState({ highlightedLink: linkRect });\n    this.recalcXLayout();\n  };\n\n  // Wrapper function to wrap the logic (no link selected and time delay)\n  updateHighlightedNode = (linkRect) => {\n    // The highlighting has to work only if there isn't any selected link\n    if (!this.state.selectedLink) {\n      if (linkRect != null) {\n        // It comes from an handleMouseOver event\n\n        clearTimeout(this.timerHighlightingLink);\n\n        // To avoid unnecessary rendering when linkRect is still the this.state.highlightedLink link.\n        if (this.state.highlightedLink !== linkRect) {\n          // This ES6 syntaxt avoid to pass the result of the callback to setTimeoutwork.\n          // It works because the ES6 arrow function does not change the context of this.\n          this.timerHighlightingLink = setTimeout(\n            () => {\n              this._updateHighlightedNode(linkRect);\n            },\n            600 // TODO: value to tune. Create a config file where all these hard-coded settings will be\n          );\n        }\n      } else {\n        // It comes from an handleMouseOut event\n\n        clearTimeout(this.timerHighlightingLink);\n\n        // To avoid unnecessary rendering when linkRect == null and this.state.highlightedLink is already null for any reason.\n        if (this.state.highlightedLink != null) {\n          this.timerHighlightingLink = setTimeout(\n            () => {\n              this._updateHighlightedNode(linkRect);\n            },\n            600 // TODO: value to tune. Create a config file where all these hard-coded settings will be\n          );\n        }\n      }\n    }\n  };\n\n  updateSelectedLink = (linkRect) => {\n    console.log(\"updateSelectedLink\");\n\n    if (linkRect !== this.state.selectedLink) {\n      console.log(\"updateSelectedLink - NewSelection\");\n\n      clearTimeout(this.timerHighlightingLink);\n\n      this.setState({\n        highlightedLink: linkRect,\n        selectedLink: linkRect,\n      });\n    }\n    //else it is a re-clik on the same link, so do nothing here\n\n    // Auto de-selection after a delay\n    if (linkRect) {\n      // Eventually restart the timer if it was already ongoing\n      clearTimeout(this.timerSelectionLink);\n\n      this.timerSelectionLink = setTimeout(\n        () => {\n          this.updateSelectedLink(null);\n        },\n        5000 // TODO: to tune. Create a config file where all these hard-coded settings will be\n      );\n    }\n  };\n\n  leftXStart(schematizeComponent, i, firstDepartureColumn, j) {\n    /* Return the x coordinate pixel that starts the LinkColumn at i, j*/\n    let previousColumns = !this.props.store.useWidthCompression\n      ? schematizeComponent.firstBin -\n        this.props.store.getBeginBin() +\n        schematizeComponent.offset\n      : schematizeComponent.offset +\n        (schematizeComponent.index - this.schematic.components[0].index) *\n          this.props.store.binScalingFactor;\n    let pixelsFromColumns =\n      (previousColumns + firstDepartureColumn + j) *\n      this.props.store.pixelsPerColumn;\n    return pixelsFromColumns + i * this.props.store.pixelsPerColumn;\n  }\n\n  renderComponent(schematizeComponent, i, pathNames) {\n    return (\n      <>\n        <ComponentRect\n          store={this.props.store}\n          item={schematizeComponent}\n          key={i}\n          height={this.visibleHeight()}\n          width={\n            schematizeComponent.arrivals.length +\n            (this.props.store.useWidthCompression\n              ? this.props.store.binScalingFactor\n              : schematizeComponent.num_bin) +\n            (schematizeComponent.departures.length - 1)\n          }\n          compressed_row_mapping={this.compressed_row_mapping}\n          pathNames={pathNames}\n        />\n\n        {schematizeComponent.arrivals.map((linkColumn, j) => {\n          return this.renderLinkColumn(\n            schematizeComponent,\n            i,\n            0,\n            j,\n            linkColumn\n          );\n        })}\n        {schematizeComponent.departures.slice(0, -1).map((linkColumn, j) => {\n          let leftPad =\n            schematizeComponent.arrivals.length +\n            (this.props.store.useWidthCompression\n              ? this.props.store.binScalingFactor\n              : schematizeComponent.num_bin);\n          return this.renderLinkColumn(\n            schematizeComponent,\n            i,\n            leftPad,\n            j,\n            linkColumn\n          );\n        })}\n      </>\n    );\n  }\n\n  renderLinkColumn(\n    schematizeComponent,\n    i,\n    firstDepartureColumn,\n    j,\n    linkColumn\n  ) {\n    const xCoordArrival = this.leftXStart(\n      schematizeComponent,\n      i,\n      firstDepartureColumn,\n      j\n    );\n    const [localColor, localOpacity, localStroke] = stringToColorAndOpacity(\n      linkColumn,\n      this.state.highlightedLink,\n      this.state.selectedLink\n    );\n    return (\n      <LinkColumn\n        store={this.props.store}\n        key={\"departure\" + i + j}\n        item={linkColumn}\n        pathNames={this.state.pathNames}\n        x={xCoordArrival}\n        pixelsPerRow={this.props.store.pixelsPerRow}\n        width={this.props.store.pixelsPerColumn}\n        color={localColor}\n        opacity={localOpacity}\n        stroke={localStroke}\n        updateHighlightedNode={this.updateHighlightedNode}\n        compressed_row_mapping={this.compressed_row_mapping}\n      />\n    );\n  }\n\n  renderLink(link) {\n    const [localColor, localOpacity] = stringToColorAndOpacity(\n      link.linkColumn,\n      this.state.highlightedLink,\n      this.state.selectedLink\n    );\n\n    return (\n      <LinkArrow\n        store={this.props.store}\n        key={\"arrow\" + link.linkColumn.key}\n        link={link}\n        color={localColor}\n        opacity={localOpacity}\n        updateHighlightedNode={this.updateHighlightedNode}\n        updateSelectedLink={this.updateSelectedLink}\n      />\n    );\n  }\n\n  renderNucleotidesSchematic = () => {\n    if (\n      !this.state.loading &&\n      // The conditions on bitWidht and useWidthCompression are lifted here,\n      // avoiding any computation if nucleotides have not to be visualized.\n      this.props.store.binWidth === 1 &&\n      !this.props.store.useWidthCompression &&\n      this.schematic.nucleotides.length > 0\n    ) {\n      return this.schematic.components.map((schematizeComponent, i) => {\n        //TO_DO: maybe it is not necessary, to confirm its elimination\n        // Check if there are nucleotides (which cover the range [this.schematic.first_bin, this.schematic.last_bin])\n        // associated to the component to visualize (which cover the range [schematizeComponent.firstBin, schematizeComponent.lastBin])\n        /*if (\n          !(\n            this.schematic.first_bin <= schematizeComponent.firstBin &&\n            schematizeComponent.firstBin <= schematizeComponent.lastBin &&\n            schematizeComponent.lastBin <= this.schematic.last_bin\n          )\n        ) {\n          return null;\n        }*/\n\n        const chunkBeginBin = this.props.store.getChunkBeginEndBin()[0];\n        const nucleotides_slice = this.schematic.nucleotides.slice(\n          schematizeComponent.firstBin - chunkBeginBin,\n          schematizeComponent.lastBin - chunkBeginBin + 1\n        );\n\n        //console.log(\"nucleotides_slice: \" + nucleotides_slice);\n\n        return (\n          <React.Fragment key={\"nt\" + i}>\n            <ComponentNucleotides\n              store={this.props.store}\n              item={schematizeComponent}\n              key={i}\n              height={this.visibleHeight()}\n              width={\n                schematizeComponent.arrivals.length +\n                (this.props.store.useWidthCompression\n                  ? this.props.store.binScalingFactor\n                  : schematizeComponent.num_bin) +\n                (schematizeComponent.departures.length - 1)\n              }\n              // They are passed only the nucleotides associated to the current component\n              nucleotides={nucleotides_slice}\n            />\n          </React.Fragment>\n        );\n      });\n    }\n\n    return;\n  };\n\n  renderSchematic() {\n    if (this.state.loading) {\n      return;\n    }\n    return this.schematic.components.map((schematizeComponent, i) => {\n      return (\n        <React.Fragment key={\"f\" + i}>\n          {this.renderComponent(schematizeComponent, i, this.state.pathNames)}\n        </React.Fragment>\n      );\n    });\n  }\n\n  renderSortedLinks() {\n    if (this.state.loading) {\n      return;\n    }\n\n    return this.distanceSortedLinks.map((record, i) => {\n      return this.renderLink(record);\n    });\n  }\n\n  loadingMessage() {\n    if (this.state.loading) {\n      return (\n        <Text\n          y={100}\n          fontSize={60}\n          width={300}\n          align=\"center\"\n          text=\"Loading...\"\n        />\n      );\n    }\n  }\n\n  render() {\n    console.log(\"Start render\");\n    return (\n      <>\n        <div\n          style={{\n            position: \"sticky\",\n            top: 0,\n            zIndex: \"2\",\n            background: \"white\",\n\n            // To keep the matrix under the container with the vertical scrolling\n            // when the matrix is larger than the page\n            width: this.state.actualWidth + 60,\n\n            // To avoid width too low with large bin_width\n            minWidth: \"100%\",\n          }}\n        >\n          <ControlHeader store={this.props.store} schematic={this.schematic} />\n\n          <Stage\n            x={this.props.store.leftOffset}\n            y={this.props.topOffset}\n            width={this.state.actualWidth + 60}\n            height={this.props.store.topOffset}\n          >\n            <Layer ref={this.layerRef2}>\n              {this.renderSortedLinks()}\n              {this.renderNucleotidesSchematic()}\n            </Layer>\n          </Stage>\n        </div>\n\n        <Stage\n          x={this.props.store.leftOffset} // removed leftOffset to simplify code. Relative coordinates are always better.\n          y={-this.props.store.topOffset} // For some reason, I have to put this, but I'd like to put 0\n          width={this.state.actualWidth + 60}\n          height={this.visibleHeight() + this.props.store.nucleotideHeight}\n        >\n          <Layer ref={this.layerRef}>\n            {this.loadingMessage()}\n            {this.renderSchematic()}\n          </Layer>\n        </Stage>\n\n        <NucleotideTooltip store={this.props.store} />\n      </>\n    );\n  }\n}\n\n// render(<App />, document.getElementById('root'));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { types } from \"mobx-state-tree\";\nimport { urlExists } from \"./URL\";\n\nconst BeginEndBin = types.optional(types.array(types.integer), [1, 60]);\n\nconst ChunkURLs = types.optional(types.array(types.string), [\"\"]);\nconst ChunkFastaURLs = types.optional(types.array(types.string), [\"\"]);\nconst ChunkBeginEndBin = types.optional(types.array(types.integer), [-1, 0]);\n\nconst PathNucPos = types.model(\"PathNucPos\", {\n  path: types.string,\n  nucPos: types.integer,\n});\n\nexport let RootStore; // AG: why is it exported?\nRootStore = types\n  .model({\n    useVerticalCompression: false,\n    useWidthCompression: false,\n    binScalingFactor: 3,\n    useConnector: true,\n    beginEndBin: BeginEndBin,\n    pixelsPerColumn: 10,\n    pixelsPerRow: 10,\n    leftOffset: 25,\n    topOffset: 400,\n    highlightedLink: 0, // we will compare linkColumns\n    maximumHeightThisFrame: 150,\n    cellToolTipContent: \"\",\n\n    // TO_DO: to change 'jsonName' in 'jsonNameDir'?\n    jsonName: \"SARS-CoV-2.genbank.20200329.complete\",\n\n    // Added attributes for the zoom level management\n    availableZoomLevels: types.optional(types.array(types.string), [\"1\"]),\n    indexSelectedZoomLevel: 0,\n\n    chunkURLs: ChunkURLs,\n    chunkFastaURLs: ChunkFastaURLs,\n    chunkBeginEndBin: ChunkBeginEndBin,\n\n    pathNucPos: types.optional(PathNucPos, { path: \"path\", nucPos: 0 }), // OR: types.maybe(PathNucPos)\n    pathIndexServerAddress: \"http://193.196.29.24:3010/\",\n    binWidth: 100,\n    nucleotideHeight: 10,\n    pangenomelast_bin: -1,\n    // TODO: Set when bin2file is read\n  })\n  .actions((self) => {\n    function updateBeginEndBin(newBegin, newEnd) {\n      /*This method needs to be atomic to avoid spurious updates and out of date validation.*/\n      newBegin = Math.max(1, Math.round(newBegin));\n      newEnd = Math.max(1, Math.round(newEnd));\n      const beginBin = getBeginBin();\n      const endBin = getEndBin();\n      if (newEnd === endBin) {\n        //end has not changed\n        let diff = endBin - beginBin;\n        newEnd = newBegin + diff; //Allows start to push End to new chunks\n      }\n      if (newEnd < newBegin) {\n        //crush newStart\n        newBegin = newEnd - 1;\n      }\n      setBeginEndBin(newBegin, newEnd);\n      console.log(\"updateBeginEnd: \" + newBegin + \" \" + newEnd);\n      console.log(\n        \"updatedBeginEnd: \" + self.beginEndBin[0] + \" \" + self.beginEndBin[1]\n      );\n    }\n    function updateTopOffset(newTopOffset) {\n      if (Number.isFinite(newTopOffset) && Number.isSafeInteger(newTopOffset)) {\n        self.topOffset = newTopOffset + 10;\n      }\n    }\n    function updateBinScalingFactor(event) {\n      let newFactor = event.target.value;\n      self.binScalingFactor = Math.max(1, Number(newFactor));\n    }\n    function updateHighlightedLink(linkRect) {\n      self.highlightedLink = linkRect;\n    }\n    function updateMaxHeight(latestHeight) {\n      self.maximumHeightThisFrame = Math.max(\n        self.maximumHeightThisFrame,\n        latestHeight\n      );\n    }\n    function resetRenderStats() {\n      self.maximumHeightThisFrame = 1;\n    }\n    function updateCellTooltipContent(newContents) {\n      self.cellToolTipContent = String(newContents);\n    }\n    function toggleUseVerticalCompression() {\n      self.useVerticalCompression = !self.useVerticalCompression;\n    }\n    function toggleUseWidthCompression() {\n      self.useWidthCompression = !self.useWidthCompression;\n    }\n    function toggleUseConnector() {\n      self.useConnector = !self.useConnector;\n    }\n    function updateHeight(event) {\n      self.pixelsPerRow = Math.max(1, Number(event.target.value));\n    }\n    function updateWidth(event) {\n      self.pixelsPerColumn = Number(event.target.value);\n    }\n\n    function tryJSONpath(event) {\n      const url =\n        process.env.PUBLIC_URL +\n        \"test_data/\" +\n        event.target.value +\n        \"/bin2file.json\";\n      if (urlExists(url)) {\n        self.jsonName = event.target.value;\n      }\n    }\n\n    function switchChunkURLs(arrayOfFile) {\n      let arraysEqual =\n        arrayOfFile.length === self.chunkURLs.length &&\n        arrayOfFile.every((e) => self.chunkURLs.indexOf(e) > -1);\n      if (!arraysEqual) {\n        self.chunkURLs = arrayOfFile;\n        console.log(\"arrayOfFile: \" + arrayOfFile);\n      }\n    }\n    function getChunkURLs() {\n      return self.chunkURLs;\n    }\n\n    function switchChunkFastaURLs(arrayOfFile) {\n      let arraysEqual =\n        arrayOfFile.length === self.chunkFastaURLs.length &&\n        arrayOfFile.every((e) => self.chunkFastaURLs.indexOf(e) > -1);\n      if (!arraysEqual) {\n        self.chunkFastaURLs = arrayOfFile;\n        console.log(\"arrayOfFastaFile: \" + arrayOfFile);\n      }\n    }\n    function getChunkFastaURLs() {\n      return self.chunkFastaURLs;\n    }\n\n    function getBeginEndBin() {\n      return self.beginEndBin;\n    }\n    function getBeginBin() {\n      return getBeginEndBin()[0];\n    }\n    function getEndBin() {\n      return getBeginEndBin()[1];\n    }\n    function setChunkBeginEndBin(newChunkBeginBin, newChunkEndBin) {\n      self.chunkBeginEndBin = [newChunkBeginBin, newChunkEndBin];\n    }\n    function getChunkBeginEndBin() {\n      return self.chunkBeginEndBin;\n    }\n\n    // Added getter and setter for zoom info management\n    function getSelectedZoomLevel() {\n      return self.availableZoomLevels[self.indexSelectedZoomLevel];\n    }\n\n    function setIndexSelectedZoomLevel(index) {\n      self.indexSelectedZoomLevel = index;\n    }\n\n    function setAvailableZoomLevels(availableZoomLevels) {\n      self.availableZoomLevels = availableZoomLevels;\n    }\n\n    function setBeginEndBin(newBeginBin, newEndBin) {\n      self.beginEndBin = [newBeginBin, newEndBin];\n    }\n    function getPath() {\n      return self.pathNucPos.path;\n    }\n    function getNucPos() {\n      return self.pathNucPos.nucPos;\n    }\n    function getPathNucPos() {\n      return self.pathNucPos;\n    }\n    function updatePathNucPos(path, nucPos) {\n      if (nucPos) {\n        nucPos = parseInt(nucPos);\n      } else {\n        nucPos = 0;\n      }\n      self.pathNucPos = { path: path, nucPos: nucPos };\n    }\n    function setBinWidth(binWidth) {\n      self.binWidth = binWidth;\n    }\n    return {\n      updateBeginEndBin,\n      updateTopOffset,\n      updateHighlightedLink,\n      updateMaxHeight,\n      resetRenderStats,\n      updateCellTooltipContent,\n      updateBinScalingFactor,\n      toggleUseVerticalCompression,\n      toggleUseWidthCompression,\n      toggleUseConnector,\n      updateHeight,\n      updateWidth,\n      tryJSONpath,\n\n      switchChunkURLs,\n      getChunkURLs,\n      switchChunkFastaURLs,\n      getChunkFastaURLs,\n      setChunkBeginEndBin,\n      getChunkBeginEndBin,\n\n      getBeginEndBin,\n      getBeginBin,\n      getEndBin,\n      getPath,\n      getNucPos,\n      getPathNucPos,\n      updatePathNucPos,\n      setBinWidth,\n\n      // Added zoom actions\n      getSelectedZoomLevel,\n      setIndexSelectedZoomLevel,\n      setAvailableZoomLevels,\n    };\n  })\n  .views((self) => ({}));\n\nexport const store = RootStore.create({});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"./ViewportInputsStore\";\n\nReactDOM.render(<App store={store} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}